library(tidyverse)

#A tibble: 6 x 4
table1

# A tibble: 12 x 4
table2

# A tibble: 6 x 3
table3

# A tibble: 3 x 3
table4a

# A tibble: 3 x 3
table4b

#in the above tables, only table1 is tidy. It’s the only representation where each column is a variable.

#There are two main advantages for tidy data:
#1. Consistent way of storing data - underlying uniformity
#2. it allows R’s vectorised nature to shine
#dplyr, ggplot2, and all the other packages in the tidyverse are designed to work with tidy data.

# Compute rate per 10,000
table1 %>% 
  mutate(rate = cases / population * 10000)

# Compute cases per year
table1 %>% 
  count(year, wt = cases)

# Visualise changes over time
library(ggplot2)
ggplot(table1, aes(year, cases)) + 
  geom_line(aes(group = country), colour = "grey50") + 
  geom_point(aes(colour = country))

#gather() - helps to tidy a dataset
table4a %>% 
  gather(`1999`, `2000`, key = "year", value = "cases")

#gather table4b
table4b %>% 
  gather(`1999`, `2000`, key = "year", value = "population")

#combine tidied versions of table4a and 4b
left_join(tidy4a, tidy4b)

#spread() - opposite of gather, helps to spread out a dataset
table2 %>%
  spread(key = type, value = count)

#separate() - pulls apart one column into multiple columns
table3 %>% 
  separate(rate, into = c("cases", "population"))

table3 %>% 
  separate(rate, into = c("cases", "population"), sep = "/")

#convert to better data types
table3 %>% 
  separate(rate, into = c("cases", "population"), convert = TRUE) #cases turned into integer from char

#unite - opposite of separate, helps to unite columns of a dataset
table5 %>% 
  unite(new, century, year)

#Missing Values
#lets create a df to work on
stocks <- tibble(
  year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
  qtr    = c(   1,    2,    3,    4,    2,    3,    4),
  return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks

#making the implicit values explicit
stocks %>% 
  spread(year, return)

#remove nas
stocks %>% 
  spread(year, return) %>% 
  gather(year, return, `2015`:`2016`, na.rm = TRUE)

#making missing values explicit
stocks %>% 
  complete(year, qtr)

#let us look at another dataset
treatment <- tribble(
  ~ person,           ~ treatment, ~response,
  "Derrick Whitmore", 1,           7,
  NA,                 2,           10,
  NA,                 3,           9,
  "Katherine Burke",  1,           4
)

treatment

#carry over the previous value to fill missing value
treatment %>% 
  fill(person)

#use fill() to fill missing values where missing values can be replaced by the most recent non-missing value
treatment %>% 
  fill(person)

#gather columns
who1 <- who %>% 
  gather(new_sp_m014:newrel_f65, key = "key", value = "cases", na.rm = TRUE)
who1

#count "key":
who1 %>% 
  count(key)

#replace column names and make variable names consistent.
who2 <- who1 %>% 
  mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who2

#separate the values with '_' as separator
who3 <- who2 %>% 
  separate(key, c("new", "type", "sexage"), sep = "_")
who3

#drop the new column and iso2 and iso3
who3 %>% 
  count(new)

who4 <- who3 %>% 
  select(-new, -iso2, -iso3)

#split after the first character
who5 <- who4 %>% 
  separate(sexage, c("sex", "age"), sep = 1)
who5

#Who is now tidy
who %>%
  gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>% 
  mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
  separate(key, c("new", "var", "sexage")) %>% 
  select(-new, -iso2, -iso3) %>% 
  separate(sexage, c("sex", "age"), sep = 1)
